FORMAT: 1A
HOST: https://iot-soil-moisture-sensor.herokuapp.com/

# soil-moisture-sensor

IOT soil moisture sensor. Sends information about specific house and 
specific sensor on demand, identified by houseid and sensorid. 

   If sensorid is not presented, then returns sensor values of all sensors
of house identified by houseid.
    
    Returned sensor fields are: 
        "sensorValue" : number value measured by sensor
        "sensorId" : id of the sensor, which measured this sensorValue
        "available" : true _ is sensor is available, or false. 
    
By default, sensor is always available, but after passing specific 
period of time without getting new sensor value from sensor, we say that
this sensor is not available and return false, until we get new data from 
this sensor.

## Ping [/ping]

Ping service, simply returns 200 status code

+ Response 200 (application/json)

## Get Sensor Value [/house/{houseid}/sensor/{sensorid}]

houseid and sensorid are integers, identifiers of house and sensor in 
this house.

### get one sensor value [GET]

If sensor is available returns with status code `200` and a `value`.
If sensor is not available, service returns `503` with last recorded
sensor value.
If sensor id was incorrect, the return 404 status code, with sensorValue
equals null, and available equals false.

+ Response 200 (application/json)

         {
            "sensorValue":3.143,
            "sensorId":1982,
            "available":true
        }
       

+ Response 503 (application/json)

        {
            "sensorValue":3.143,
            "sensorId":1982,
            "available":false
        }

+ Response 404 (application/json)

         {
            "sensorValue":null,
            "sensorId":1982,
            "available":false
        }

## Get Sensor Values [/house/{houseid}]

houseid is integer, identifier of house.

### Get house sensor values [GET]

Returnes list of sensor values.

If `houseid` is wrong, return code will be `404` or if house
not available `503`

If sensor is available `available` will behave value `"yes"` 
otherwise `"no"`

If sensor is available it's value will be stored in `sensorvalue`

If sensor is not available `lastvalue` will hold last recorded vaue
or `null`

+ Response 200 (application/json)

        {
            "data":
            {
                "1252":
                {
                    "sensorValue":27.32,
                    "sensorId":1252,
                    "available":true
                },
                "1452":
                {
                    "sensorValue":14.21,
                    "sensorId":1452,
                    "available":true
                },
                "1982":
                {
                    "sensorValue":3.143,
                    "sensorId":1982,
                    "available":true
                }
            },
            "values":
            [
                {
                    "sensorValue":27.32,
                    "sensorId":1252,
                    "available":true
                },
                {
                    "sensorValue":14.21,
                    "sensorId":1452,
                    "available":true
                },
                {
                    "sensorValue":3.143,
                    "sensorId":1982,
                    "available":true
                }
            ]
        }

+ Response 404 (application/json)

+ Response 503 (application/json)